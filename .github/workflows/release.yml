name: Release Image Builds

# This workflow is to allow the building of Docker release images by copying the binary from a base image to a minimum size OS image.

on:
  push:
    branches: ['main', 'docker-builds']
  pull_request:
    branches: ['main', 'docker-builds']
    types: [opened, closed]

env:
  PACKAGE_NAME: aws-iot-securetunneling-localproxy
  ECR_BASE_REPO: aws-iot-securetunneling-localproxy-base-images
  ECR_REPO: aws-iot-securetunneling-localproxy-release-images

jobs:
  build-docker-image-ubuntu-amd64:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ECR_USER_AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ECR_USER_AWS_KEY_SECRET }}
          aws-region: us-east-1
      - name: Login to ECR
        run: aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{secrets.ECR_ACCOUNT_URL}}
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build Ubuntu Release Image
        uses: docker/build-push-action@v3
        with:
          file: .github/docker-images/Dockerfile
          build-args: |
            OS=ubuntu:latest
            BASE_IMAGE=${{secrets.ECR_ACCOUNT_URL}}/${{ env.ECR_BASE_REPO }}:amd64-ubuntu-latest
          context: .
          push: true
          tags: |
            ${{secrets.ECR_ACCOUNT_URL}}/${{ env.ECR_REPO }}:amd64-ubuntu-${{ github.sha }}
            ${{secrets.ECR_ACCOUNT_URL}}/${{ env.ECR_REPO }}:amd64-ubuntu-latest
          platforms: linux/amd64
  build-docker-image-ubuntu-arm64:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ECR_USER_AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ECR_USER_AWS_KEY_SECRET }}
          aws-region: us-east-1
      - name: Login to ECR
        run: aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{secrets.ECR_ACCOUNT_URL}}
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build Ubuntu Release Image
        uses: docker/build-push-action@v3
        with:
          file: .github/docker-images/Dockerfile
          build-args: |
            OS=ubuntu:latest
            BASE_IMAGE=${{secrets.ECR_ACCOUNT_URL}}/${{ env.ECR_BASE_REPO }}:arm64-ubuntu-latest
          context: .
          push: true
          tags: |
            ${{secrets.ECR_ACCOUNT_URL}}/${{ env.ECR_REPO }}:arm64-ubuntu-${{ github.sha }}
            ${{secrets.ECR_ACCOUNT_URL}}/${{ env.ECR_REPO }}:arm64-ubuntu-latest
          platforms: linux/arm64
  build-docker-image-ubuntu-armv7:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ECR_USER_AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ECR_USER_AWS_KEY_SECRET }}
          aws-region: us-east-1
      - name: Login to ECR
        run: aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{secrets.ECR_ACCOUNT_URL}}
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build ubuntu Release Image
        uses: docker/build-push-action@v3
        with:
          file: .github/docker-images/Dockerfile
          build-args: |
            OS=ubuntu:18.04
            BASE_IMAGE=${{secrets.ECR_ACCOUNT_URL}}/${{ env.ECR_BASE_REPO }}:armv7-ubuntu-latest
          context: .
          push: true
          tags: |
            ${{secrets.ECR_ACCOUNT_URL}}/${{ env.ECR_REPO }}:armv7-ubuntu-${{ github.sha }}
            ${{secrets.ECR_ACCOUNT_URL}}/${{ env.ECR_REPO }}:armv7-ubuntu-latest
          platforms: linux/arm/v7
  build-docker-image-ubi8-amd64:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ECR_USER_AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ECR_USER_AWS_KEY_SECRET }}
          aws-region: us-east-1
      - name: Login to ECR
        run: aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{secrets.ECR_ACCOUNT_URL}}
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build ubi8 Release Image
        uses: docker/build-push-action@v3
        with:
          file: .github/docker-images/Dockerfile
          build-args: |
            OS=redhat/ubi8:latest
            BASE_IMAGE=${{secrets.ECR_ACCOUNT_URL}}/${{ env.ECR_BASE_REPO }}:amd64-ubi8-latest
          context: .
          push: true
          tags: |
            ${{secrets.ECR_ACCOUNT_URL}}/${{ env.ECR_REPO }}:amd64-ubi8-${{ github.sha }}
            ${{secrets.ECR_ACCOUNT_URL}}/${{ env.ECR_REPO }}:amd64-ubi8-latest
          platforms: linux/amd64
  build-docker-image-ubi8-arm64:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ECR_USER_AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ECR_USER_AWS_KEY_SECRET }}
          aws-region: us-east-1
      - name: Login to ECR
        run: aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{secrets.ECR_ACCOUNT_URL}}
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build ubi8 Release Image
        uses: docker/build-push-action@v3
        with:
          file: .github/docker-images/Dockerfile
          build-args: |
            OS=redhat/ubi8:latest
            BASE_IMAGE=${{secrets.ECR_ACCOUNT_URL}}/${{ env.ECR_BASE_REPO }}:arm64-ubi8-latest
          context: .
          push: true
          tags: |
            ${{secrets.ECR_ACCOUNT_URL}}/${{ env.ECR_REPO }}:arm64-ubi8-${{ github.sha }}
            ${{secrets.ECR_ACCOUNT_URL}}/${{ env.ECR_REPO }}:arm64-ubi8-latest
          platforms: linux/arm64
  build-docker-image-amazonlinux-amd64:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ECR_USER_AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ECR_USER_AWS_KEY_SECRET }}
          aws-region: us-east-1
      - name: Login to ECR
        run: aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{secrets.ECR_ACCOUNT_URL}}
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build amazonlinux Release Image
        uses: docker/build-push-action@v3
        with:
          file: .github/docker-images/Dockerfile
          build-args: |
            OS=amazonlinux:latest
            BASE_IMAGE=${{secrets.ECR_ACCOUNT_URL}}/${{ env.ECR_BASE_REPO }}:amd64-amazonlinux-latest
          context: .
          push: true
          tags: |
            ${{secrets.ECR_ACCOUNT_URL}}/${{ env.ECR_REPO }}:amd64-amazonlinux-${{ github.sha }}
            ${{secrets.ECR_ACCOUNT_URL}}/${{ env.ECR_REPO }}:amd64-amazonlinux-latest
          platforms: linux/amd64
  build-docker-image-amazonlinux-arm64:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ECR_USER_AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ECR_USER_AWS_KEY_SECRET }}
          aws-region: us-east-1
      - name: Login to ECR
        run: aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{secrets.ECR_ACCOUNT_URL}}
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build amazonlinux Release Image
        uses: docker/build-push-action@v3
        with:
          file: .github/docker-images/Dockerfile
          build-args: |
            OS=amazonlinux:latest
            BASE_IMAGE=${{secrets.ECR_ACCOUNT_URL}}/${{ env.ECR_BASE_REPO }}:arm64-amazonlinux-latest
          context: .
          push: true
          tags: |
            ${{secrets.ECR_ACCOUNT_URL}}/${{ env.ECR_REPO }}:arm64-amazonlinux-${{ github.sha }}
            ${{secrets.ECR_ACCOUNT_URL}}/${{ env.ECR_REPO }}:arm64-amazonlinux-latest
          platforms: linux/arm64
  build-docker-image-debian-amd64:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ECR_USER_AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ECR_USER_AWS_KEY_SECRET }}
          aws-region: us-east-1
      - name: Login to ECR
        run: aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{secrets.ECR_ACCOUNT_URL}}
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build debian Release Image
        uses: docker/build-push-action@v3
        with:
          file: .github/docker-images/Dockerfile
          build-args: |
            OS=debian:latest
            BASE_IMAGE=${{secrets.ECR_ACCOUNT_URL}}/${{ env.ECR_BASE_REPO }}:amd64-debian-latest
          context: .
          push: true
          tags: |
            ${{secrets.ECR_ACCOUNT_URL}}/${{ env.ECR_REPO }}:amd64-debian-${{ github.sha }}
            ${{secrets.ECR_ACCOUNT_URL}}/${{ env.ECR_REPO }}:amd64-debian-latest
          platforms: linux/amd64
  build-docker-image-debian-arm64:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ECR_USER_AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ECR_USER_AWS_KEY_SECRET }}
          aws-region: us-east-1
      - name: Login to ECR
        run: aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{secrets.ECR_ACCOUNT_URL}}
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build debian Release Image
        uses: docker/build-push-action@v3
        with:
          file: .github/docker-images/Dockerfile
          build-args: |
            OS=debian:latest
            BASE_IMAGE=${{secrets.ECR_ACCOUNT_URL}}/${{ env.ECR_BASE_REPO }}:arm64-debian-latest
          context: .
          push: true
          tags: |
            ${{secrets.ECR_ACCOUNT_URL}}/${{ env.ECR_REPO }}:arm64-debian-${{ github.sha }}
            ${{secrets.ECR_ACCOUNT_URL}}/${{ env.ECR_REPO }}:arm64-debian-latest
          platforms: linux/arm64
  build-docker-image-fedora-amd64:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ECR_USER_AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ECR_USER_AWS_KEY_SECRET }}
          aws-region: us-east-1
      - name: Login to ECR
        run: aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{secrets.ECR_ACCOUNT_URL}}
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build fedora Release Image
        uses: docker/build-push-action@v3
        with:
          file: .github/docker-images/Dockerfile
          build-args: |
            OS=fedora:latest
            BASE_IMAGE=${{secrets.ECR_ACCOUNT_URL}}/${{ env.ECR_BASE_REPO }}:amd64-fedora-latest
          context: .
          push: true
          tags: |
            ${{secrets.ECR_ACCOUNT_URL}}/${{ env.ECR_REPO }}:amd64-fedora-${{ github.sha }}
            ${{secrets.ECR_ACCOUNT_URL}}/${{ env.ECR_REPO }}:amd64-fedora-latest
          platforms: linux/amd64
  build-docker-image-fedora-arm64:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ECR_USER_AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ECR_USER_AWS_KEY_SECRET }}
          aws-region: us-east-1
      - name: Login to ECR
        run: aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{secrets.ECR_ACCOUNT_URL}}
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build fedora Release Image
        uses: docker/build-push-action@v3
        with:
          file: .github/docker-images/Dockerfile
          build-args: |
            OS=fedora:latest
            BASE_IMAGE=${{secrets.ECR_ACCOUNT_URL}}/${{ env.ECR_BASE_REPO }}:arm64-fedora-latest
          context: .
          push: true
          tags: |
            ${{secrets.ECR_ACCOUNT_URL}}/${{ env.ECR_REPO }}:arm64-fedora-${{ github.sha }}
            ${{secrets.ECR_ACCOUNT_URL}}/${{ env.ECR_REPO }}:arm64-fedora-latest
          platforms: linux/arm64